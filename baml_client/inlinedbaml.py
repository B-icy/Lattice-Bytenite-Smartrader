# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

_file_map = {

    "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\nclient<llm> CustomGPT4o {\n  provider openai\n  options {\n    model \"gpt-4o\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomGPT4oMini {\n  provider openai\n  retry_policy Exponential\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomSonnet {\n  provider anthropic\n  options {\n    model \"claude-3-5-sonnet-20241022\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n\nclient<llm> CustomHaiku {\n  provider anthropic\n  retry_policy Constant\n  options {\n    model \"claude-3-haiku-20240307\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\nclient<llm> CustomFast {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    strategy [CustomGPT4oMini, CustomHaiku]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\nclient<llm> OpenaiFallback {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [CustomGPT4oMini, CustomGPT4oMini]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/retry\nretry_policy Constant {\n  max_retries 3\n  // Strategy is optional\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}\n\nretry_policy Exponential {\n  max_retries 2\n  // Strategy is optional\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    multiplier 1.5\n    max_delay_ms 10000\n  }\n}\n",
    "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.207.1\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode sync\n}\n",
    "historical_prism.baml": "// =============================================\n// Yahoo Finance Historical Data Analysis BAML Script\n// Using Mercury Coder on OpenRouter\n// =============================================\n\n// Data Models (unchanged)\nclass StockData {\n    ticker string\n    company_name string\n    current_price float\n    currency string\n    market_cap string?\n}\n\nclass PricePoint {\n    date string\n    open float\n    high float\n    low float\n    close float\n    volume int\n    adj_close float?\n}\n\nclass PriceAnalysis {\n    ticker string\n    period_analyzed string\n    total_return_percent float\n    volatility float\n    max_price float\n    min_price float\n    average_volume int\n    trend_direction string // \"bullish\", \"bearish\", \"sideways\"\n    key_insights string[]\n}\n\nclass TechnicalIndicators {\n    sma_20 float?\n    sma_50 float?\n    rsi float?\n    bollinger_upper float?\n    bollinger_lower float?\n    support_level float?\n    resistance_level float?\n}\n\nclass MarketComparison {\n    ticker string\n    benchmark_ticker string\n    outperformance_percent float\n    beta float?\n    correlation float\n    relative_strength string\n}\n\nclass FundamentalAnalysis {\n    pe_ratio float?\n    forward_pe_ratio float?\n    peg_ratio float?\n    price_to_book float?\n    dividend_yield float?\n    fifty_two_week_high float?\n    fifty_two_week_low float?\n}\n\nclass ComprehensiveReport {\n    executive_summary string\n    price_analysis PriceAnalysis\n    fundamental_analysis FundamentalAnalysis?\n    technical_analysis TechnicalIndicators\n    market_comparison MarketComparison?\n    risk_assessment string\n    investment_outlook string\n    key_recommendations string[]\n}\n\n\n\n\n// Tool Functions\nfunction FetchHistoricalData(ticker: string, period: string, interval: string) -> PricePoint[] {\n    client YahooFinanceClient\n    prompt #\"\n    Fetch historical price data for ticker {{ ticker }} over {{ period }} period with {{ interval }} intervals.\n\n    Use the Yahoo Finance API endpoint:\n    https://query1.finance.yahoo.com/v8/finance/chart/{{ ticker }}?period1={{ start_timestamp }}&period2={{ end_timestamp }}&interval={{ interval }}\n\n    Extract and return the following data points for each trading session:\n    - Date (YYYY-MM-DD format)\n    - Opening price\n    - High price  \n    - Low price\n    - Closing price\n    - Trading volume\n    - Adjusted closing price (if available)\n\n    If the API request fails or returns no data, return an empty list rather than fabricated values.\n    {{ ctx.output_format }}\n    \"#\n}\n\nfunction GetStockInfo(ticker: string) -> StockData {\n    client YahooFinanceClient\n    prompt #\"\n    Retrieve basic stock information for ticker {{ ticker }} from Yahoo Finance.\n    \n    Use the quote summary endpoint:\n    https://query1.finance.yahoo.com/v10/finance/quoteSummary/{{ ticker }}?modules=price,summaryDetail\n    \n    Extract:\n    - Company name\n    - Current stock price\n    - Currency\n    - Market capitalization\n    \n    {{ ctx.output_format }}\n    \"#\n}\n\nfunction CalculateTechnicalIndicators(price_data: PricePoint[], ticker: string) -> TechnicalIndicators {\n    client AnalysisClient\n    prompt #\"\n    Given this historical price data for {{ ticker }}:\n    {{ price_data }}\n    \n    Calculate the following technical indicators:\n    1. Simple Moving Average (20-day and 50-day)\n    2. Relative Strength Index (RSI) - current value\n    3. Bollinger Bands (upper and lower)\n    4. Support and resistance levels based on recent price action\n    \n    Use standard financial calculation methods for each indicator.\n    \n    {{ ctx.output_format }}\n    \"#\n}\n\nfunction AnalyzePricePerformance(price_data: PricePoint[], ticker: string, period: string) -> PriceAnalysis {\n    client AnalysisClient\n    prompt #\"\n    Analyze the price performance for {{ ticker }} over {{ period }} period using this data:\n    {{ price_data }}\n    \n    Calculate and provide:\n    1. Total return percentage (first to last price)\n    2. Price volatility (standard deviation of daily returns)\n    3. Maximum and minimum prices in the period\n    4. Average daily trading volume\n    5. Overall trend direction (bullish/bearish/sideways)\n    6. 3-5 key insights about price movement patterns\n    \n    Base your analysis on actual price movements and trading patterns.\n    \n    {{ ctx.output_format }}\n    \"#\n}\n\nfunction CompareToMarket(ticker: string, price_data: PricePoint[], benchmark_ticker: string) -> MarketComparison {\n    client AnalysisClient\n    prompt #\"\n    Compare {{ ticker }} performance against {{ benchmark_ticker }} benchmark using the provided price data:\n    {{ price_data }}\n    \n    You'll need to fetch {{ benchmark_ticker }} data for the same period and calculate:\n    1. Relative outperformance/underperformance percentage\n    2. Beta coefficient (if possible to estimate)\n    3. Correlation with the benchmark\n    4. Relative strength assessment\n    \n    Provide a clear comparison of how {{ ticker }} performed relative to the market.\n    \n    {{ ctx.output_format }}\n    \"#\n}\n\n// Main Analysis Function\nfunction GenerateHistoricalAnalysisReport(\n    ticker: string, \n    period: string, \n    benchmark: string,\n    interval: string\n) -> ComprehensiveReport {\n    client ReportClient\n    prompt #\"\n    Generate a comprehensive historical analysis report for {{ ticker }} with these requirements:\n    \n    ANALYSIS PERIOD: {{ period }}\n    DATA INTERVAL: {{ interval }}\n    BENCHMARK: {{ benchmark }}\n    \n    Your report must include:\n\n    1. EXECUTIVE SUMMARY (2-3 paragraphs)\n       - Overall performance assessment\n       - Key highlights and lowlights\n       - Market context\n\n    2. PRICE ANALYSIS\n       - Use the historical data to calculate total returns\n       - Analyze volatility and price ranges\n       - Identify trend patterns\n       - Highlight significant price movements\n\n    3. FUNDAMENTAL ANALYSIS\n       - P/E ratio, forward P/E, PEG ratio\n       - Price-to-book ratio\n       - Dividend yield\n       - 52-week high and low\n\n    4. TECHNICAL ANALYSIS\n       - Calculate moving averages\n       - Assess momentum indicators\n       - Identify support/resistance levels\n       - Evaluate trading signals\n\n    5. MARKET COMPARISON\n       - Compare performance vs {{ benchmark }}\n       - Calculate relative strength\n       - Assess correlation patterns\n\n    6. RISK ASSESSMENT\n       - Evaluate price volatility\n       - Identify risk factors\n       - Assess drawdown periods\n\n    7. INVESTMENT OUTLOOK\n       - Provide forward-looking perspective\n       - Consider technical and fundamental factors\n       - Discuss potential scenarios\n\n    8. KEY RECOMMENDATIONS\n       - Provide 3-5 actionable insights\n       - Include risk considerations\n       - Suggest monitoring points\n    \n    QUALITY REQUIREMENTS\n    - Base all analysis strictly on the retrieved quantitative data; never invent metrics.\n    - If any required metric cannot be produced, set the corresponding field to null and explain the gap in prose.\n    - Express dividend_yield as a decimal fraction (e.g., 0.021 for 2.1%).\n    - Keep commentary focused on the trailing period ending on the most recent available trading day.\n\n    Ensure the report is professional, data-driven, and actionable.\n\n    {{ ctx.output_format }}\n    \"#\n}\n\n\n\n// OpenRouter Client Configurations with Mercury Coder\nclient YahooFinanceClient {\n    provider openai\n    options {\n        model \"inception/mercury-coder\"\n        api_key env.OPENROUTER_API_KEY\n        base_url \"https://openrouter.ai/api/v1\"\n        max_tokens 2000\n        temperature 0.1\n        default_headers {\n            \"HTTP-Referer\" \"https://localhost:3000\"\n            \"X-Title\" \"BAML Yahoo Finance Analysis\"\n        }\n    }\n}\n\nclient AnalysisClient {\n    provider openai\n    options {\n        model \"inception/mercury-coder\"\n        api_key env.OPENROUTER_API_KEY\n        base_url \"https://openrouter.ai/api/v1\"\n        max_tokens 1500\n        temperature 0.2\n        default_headers {\n            \"HTTP-Referer\" \"https://localhost:3000\"\n            \"X-Title\" \"BAML Financial Analysis\"\n        }\n    }\n}\n\nclient ReportClient {\n    provider openai\n    options {\n        model \"inception/mercury-coder\"\n        api_key env.OPENROUTER_API_KEY\n        base_url \"https://openrouter.ai/api/v1\"\n        max_tokens 3000\n        temperature 0.3\n        default_headers {\n            \"HTTP-Referer\" \"https://localhost:3000\"\n            \"X-Title\" \"BAML Report Generation\"\n        }\n    }\n}\n\n// Test Configuration\ntest TestAppleAnalysis {\n    functions [GenerateHistoricalAnalysisReport]\n    args {\n        ticker \"AAPL\"\n        period \"1y\"\n        benchmark \"SPY\"\n        interval \"1d\"\n    }\n}\n\ntest TestTeslaQuarterlyAnalysis {\n    functions [GenerateHistoricalAnalysisReport]\n    args {\n        ticker \"TSLA\"\n        period \"3mo\"\n        benchmark \"QQQ\"\n        interval \"1d\"\n    }\n}\n\ntest TestCryptoAnalysis {\n    functions [GenerateHistoricalAnalysisReport]\n    args {\n        ticker \"BTC-USD\"\n        period \"6mo\"\n        benchmark \"^IXIC\"\n        interval \"1d\"\n    }\n}\n",
    "insider_trading.baml": "// =============================================\n// Insider Trading Analysis Agent\n// Using FMP for insider data\n// =============================================\n\n// Data Models\nclass InsiderTrade {\n    name string\n    title string\n    transaction_type string // \"Buy\", \"Sell\"\n    shares int\n    price float\n    value float\n    transaction_date string\n    filing_date string\n    security_type string\n}\n\nclass InsiderActivitySummary {\n    total_buy_volume int\n    total_sell_volume int\n    net_insider_activity float\n    key_insiders string[]\n    activity_trend string // \"accumulating\", \"distributing\", \"neutral\"\n}\n\nclass InsiderAnalysisReport {\n    ticker string\n    recent_transactions InsiderTrade[]\n    activity_summary InsiderActivitySummary\n    significance_assessment string\n    key_insights string[]\n}\n\n// Tool Functions\nfunction AnalyzeInsiderActivity(transactions: InsiderTrade[], ticker: string) -> InsiderActivitySummary {\n    client AnalysisClient\n    prompt #\"\n    Analyze insider trading activity patterns for {{ ticker }}.\n\n    Transactions:\n    {{ transactions }}\n\n    Analyze:\n    1. Total buy vs sell volumes\n    2. Net insider activity (buy - sell value)\n    3. Key insiders making transactions\n    4. Overall activity trend (accumulating/distributing/neutral)\n\n    Ignore placeholder or anonymized names and flag situations with fewer than 2 valid transactions by marking totals as null.\n    Calculate volumes and values in appropriate units.\n\n    {{ ctx.output_format }}\n    \"#\n}\n\n// Main Analysis Function\nfunction GenerateInsiderReport(ticker: string) -> InsiderAnalysisReport {\n    client ReportClient\n    prompt #\"\n    Generate a specialized insider trading analysis report for {{ ticker }} using FMP insider data.\n\n    DATA SOURCES:\n    - Financial Modeling Prep Insider Trading API (env.FMP_API_KEY)\n      Endpoint: /v4/insider-trading?symbol={{ ticker }}\n\n    Report Structure:\n    1. RECENT INSIDER TRANSACTIONS\n       - List of 5-10 most recent transactions\n       - Include insider name, title, type, shares, price, date\n\n    2. ACTIVITY SUMMARY\n       - Total buy/sell volumes\n       - Net insider activity\n       - Key active insiders\n\n    3. SIGNIFICANCE ASSESSMENT\n       - What the insider activity suggests about company outlook\n       - Potential market implications\n\n    4. KEY INSIGHTS\n       - 3-5 actionable insights from insider trading patterns\n\n    Focus on significant transactions and patterns that may indicate insider confidence or concerns.\n    Exclude entries older than 12 months and omit placeholder names like \"John Doe\"; if no qualifying transactions exist, return an empty list and explain the limitation.\n\n    {{ ctx.output_format }}\n    \"#\n}\n\n// Test Configuration\ntest TestInsiderAnalysis {\n    functions [GenerateInsiderReport]\n    args {\n        ticker \"AAPL\"\n    }\n}\n",
    "market_conditions.baml": "// =============================================\n// General Market Conditions Agent\n// Using Alpaca and FMP for market data\n// =============================================\n\n// Data Models\nclass MarketIndex {\n    symbol string\n    name string\n    current_value float\n    change_percent float\n    volume int?\n}\n\nclass EconomicIndicator {\n    name string\n    value string\n    date string\n    change string\n    significance string\n}\n\nclass SectorPerformance {\n    sector_name string\n    performance_percent float\n    leading_stocks string[]\n    trend string\n}\n\nclass MarketOverview {\n    overall_market_sentiment string // \"bullish\", \"bearish\", \"neutral\"\n    vix_level float\n    market_breadth string\n    key_drivers string[]\n}\n\nclass MarketConditionsAnalysisReport {\n    market_overview MarketOverview\n    major_indices MarketIndex[]\n    economic_indicators EconomicIndicator[]\n    sector_performance SectorPerformance[]\n    outlook string\n    key_insights string[]\n}\n\n// Tool Functions\nfunction AnalyzeSectorPerformance() -> SectorPerformance[] {\n    client AnalysisClient\n    prompt #\"\n    Analyze performance of major market sectors.\n\n    Sectors to analyze:\n    - Technology\n    - Healthcare\n    - Financials\n    - Energy\n    - Consumer Discretionary\n    - Industrials\n\n    For each sector:\n    1. Performance percentage (YTD or recent period)\n    2. Leading stocks\n    3. Current trend (uptrend, downtrend, sideways)\n\n    Use sector ETF data or index data.\n    If any sector lacks recent data, set its performance_percent to null and explain the gap in the trend field.\n    \"#\n}\n\n// Main Analysis Function\nfunction GenerateMarketConditionsReport() -> MarketConditionsAnalysisReport {\n    client ReportClient\n    prompt #\"\n    Generate a comprehensive general market conditions report using Alpaca and FMP data.\n\n    DATA SOURCES:\n    - Alpaca Market Data API (env.ALPACA_API_KEY, env.ALPACA_SECRET_KEY)\n      Fetch indices via /v2/stocks/SPY/bars, /v2/stocks/DIA/bars, etc.\n    - Financial Modeling Prep APIs (env.FMP_API_KEY)\n      Economic indicators via /api/v3/economic, market performance via /api/v3/market-performance\n\n    Report Structure:\n    1. MARKET OVERVIEW\n       - Overall market sentiment\n       - VIX level and volatility assessment\n       - Market breadth (advancing vs declining stocks)\n\n    2. MAJOR INDICES PERFORMANCE\n       - Current values and daily changes for key indices\n       - Volume analysis\n\n    3. ECONOMIC INDICATORS\n       - Key economic data and trends\n       - Implications for markets\n\n    4. SECTOR PERFORMANCE\n       - Performance by sector\n       - Leading and lagging sectors\n\n    5. MARKET OUTLOOK\n       - Short-term market direction\n       - Key drivers and risks\n\n    6. KEY INSIGHTS\n       - 3-5 actionable insights for investors\n       - Tactical considerations\n\n    Provide context for how these conditions might affect individual stocks.\n    Highlight any data limitations or stale indicators rather than filling them with estimates.\n\n    {{ ctx.output_format }}\n    \"#\n}\n\n// Test Configuration\ntest TestMarketConditions {\n    functions [GenerateMarketConditionsReport]\n    args {}\n}\n",
    "news.baml": "// =============================================\n// News Analysis Agent\n// Using FMP for news data\n// =============================================\n\n// Data Models\nclass NewsArticle {\n    title string\n    content string\n    published_date string\n    source string\n    url string\n    sentiment_score float? // -1 to 1\n    relevance_score float?\n}\n\nclass NewsSentimentAnalysis {\n    overall_sentiment string // \"bullish\", \"bearish\", \"neutral\"\n    sentiment_trend string[]\n    key_themes string[]\n    market_impact_assessment string\n}\n\nclass NewsAnalysisReport {\n    ticker string\n    articles NewsArticle[]\n    sentiment_analysis NewsSentimentAnalysis\n    summary string\n    key_insights string[]\n}\n\n// Tool Functions\nfunction AnalyzeNewsSentiment(articles: NewsArticle[], ticker: string) -> NewsSentimentAnalysis {\n    client AnalysisClient\n    prompt #\"\n    Analyze sentiment and market impact of news articles for {{ ticker }}.\n\n    Articles:\n    {{ articles }}\n\n    Analyze:\n    1. Overall sentiment (bullish/bearish/neutral)\n    2. Sentiment trends over time\n    3. Key themes and topics\n    4. Potential market impact assessment\n\n    If there are fewer than 2 recent articles, return null fields and note the insufficiency rather than extrapolating.\n    Use natural language processing to determine sentiment scores.\n\n    {{ ctx.output_format }}\n    \"#\n}\n\n// Main Analysis Function\nfunction GenerateNewsReport(ticker: string) -> NewsAnalysisReport {\n    client ReportClient\n    prompt #\"\n    Generate a specialized news analysis report for {{ ticker }} using FMP news data.\n\n    DATA SOURCES:\n    - Financial Modeling Prep Stock News API (env.FMP_API_KEY)\n      Endpoint: /v3/stock_news?tickers={{ ticker }}\n\n    Report Structure:\n    1. RECENT NEWS ARTICLES\n       - List of 5-10 most recent relevant articles\n       - Include title, source, date, and brief summary\n\n    2. SENTIMENT ANALYSIS\n       - Overall market sentiment from news\n       - Sentiment trends and changes\n       - Key themes emerging from coverage\n\n    3. MARKET IMPACT ASSESSMENT\n       - How news might affect stock price\n       - Potential catalysts or headwinds\n\n    4. NEWS SUMMARY\n       - Concise overview of recent developments\n\n    5. KEY INSIGHTS\n       - 3-5 actionable insights from news analysis\n\n    Focus on high-quality, relevant news sources and objective analysis.\n    Only include articles published within the last 120 days relative to the report date.\n    Do not fabricate headlines or metrics; if no qualifying articles are returned, provide an empty list and explain the limitation in the summary.\n\n    {{ ctx.output_format }}\n    \"#\n}\n\n// Test Configuration\ntest TestNewsAnalysis {\n    functions [GenerateNewsReport]\n    args {\n        ticker \"AAPL\"\n    }\n}\n",
    "resume.baml": "// Defining a data model.\nclass Resume {\n  name string\n  email string\n  experience string[]\n  skills string[]\n}\n\n// Create a function to extract the resume from a string.\nfunction ExtractResume(resume: string) -> Resume {\n  // Route through OpenRouter so the OPENROUTER_API_KEY from .env is used.\n  client ResumeExtractionClient\n  prompt #\"\n    Extract from this content:\n    {{ resume }}\n\n    {{ ctx.output_format }}\n  \"#\n}\n\nclient ResumeExtractionClient {\n  provider openai\n  options {\n    model \"inception/mercury-coder\"\n    api_key env.OPENROUTER_API_KEY\n    base_url \"https://openrouter.ai/api/v1\"\n    temperature 0.2\n    max_tokens 800\n    default_headers {\n      \"HTTP-Referer\" \"https://localhost:3000\"\n      \"X-Title\" \"BAML Resume Extraction\"\n    }\n  }\n}\n\n// Test the function with a sample resume. Open the VSCode playground to run this.\ntest vaibhav_resume {\n  functions [ExtractResume]\n  args {\n    resume #\"\n      Vaibhav Gupta\n      vbv@boundaryml.com\n\n      Experience:\n      - Founder at BoundaryML\n      - CV Engineer at Google\n      - CV Engineer at Microsoft\n\n      Skills:\n      - Rust\n      - C++\n    \"#\n  }\n}\n",
    "sentiment.baml": "// =============================================\n// Sentiment Analysis Agent\n// Using multiple sources for sentiment data\n// =============================================\n\n// Data Models\nclass SentimentSource {\n    source_type string // \"news\", \"social_media\", \"options\", \"analyst\"\n    sentiment_score float // -1 to 1\n    confidence_level float\n    key_indicators string[]\n}\n\nclass MarketSentiment {\n    overall_sentiment string // \"extremely_bullish\", \"bullish\", \"neutral\", \"bearish\", \"extremely_bearish\"\n    sentiment_score float // -1 to 1\n    sources SentimentSource[]\n    sentiment_trend string[]\n}\n\nclass OptionsFlow {\n    put_call_ratio float\n    unusual_activity string[]\n    institutional_sentiment string\n}\n\nclass SentimentAnalysisReport {\n    ticker string\n    market_sentiment MarketSentiment\n    options_flow OptionsFlow?\n    social_sentiment string\n    analyst_sentiment string\n    key_insights string[]\n}\n\n// Tool Functions\nfunction AnalyzeNewsSentimentForSentiment(ticker: string) -> SentimentSource {\n    client AnalysisClient\n    prompt #\"\n    Analyze news sentiment for {{ ticker }} from recent articles.\n\n    Fetch and analyze recent news articles to determine:\n    1. Sentiment score (-1 to 1)\n    2. Confidence level (0-1)\n    3. Key positive/negative indicators\n\n    Return sentiment analysis focused on market perception.\n    \"#\n}\n\nfunction AnalyzeSocialSentiment(ticker: string) -> SentimentSource {\n    client AnalysisClient\n    prompt #\"\n    Analyze social media sentiment for {{ ticker }}.\n\n    Search social media platforms (Twitter, Reddit, etc.) for recent discussions about {{ ticker }}.\n\n    Determine:\n    1. Overall social sentiment score\n    2. Confidence in the analysis\n    3. Key themes driving sentiment\n\n    Focus on retail investor sentiment and trending topics.\n    If social data is sparse or unavailable, return neutral sentiment_score and a confidence_level of 0.\n    \"#\n}\n\nfunction AnalyzeOptionsSentiment(ticker: string) -> OptionsFlow {\n    client AnalysisClient\n    prompt #\"\n    Analyze options market sentiment for {{ ticker }}.\n\n    Examine options data to determine:\n    1. Put/call ratio\n    2. Unusual options activity\n    3. Institutional positioning sentiment\n\n    Use options flow data to gauge market expectations.\n    If you cannot obtain options data with sufficient depth, set all numeric fields to null and describe the limitation.\n    \"#\n}\n\n// Main Analysis Function\nfunction GenerateSentimentAnalysisReport(ticker: string) -> SentimentAnalysisReport {\n    client ReportClient\n    prompt #\"\n    Generate a comprehensive sentiment analysis report for {{ ticker }}.\n\n    Report Structure:\n    1. MARKET SENTIMENT OVERVIEW\n       - Overall sentiment score and classification\n       - Breakdown by source (news, social, options, analyst)\n\n    2. SENTIMENT SOURCES ANALYSIS\n       - News sentiment with key indicators\n       - Social media sentiment trends\n       - Options flow analysis\n       - Analyst sentiment summary\n\n    3. SENTIMENT TREND\n       - How sentiment has changed recently\n       - Potential drivers of sentiment shifts\n\n    4. KEY INSIGHTS\n       - 3-5 actionable insights from sentiment analysis\n       - Risk considerations based on sentiment extremes\n\n    Integrate multiple data sources for a holistic sentiment view.\n    Consider contrarian indicators and sentiment extremes.\n    If any upstream analysis returned nulls, carry those forward and explicitly call out the data gaps instead of extrapolating.\n\n    {{ ctx.output_format }}\n    \"#\n}\n\n// Test Configuration\ntest TestSentimentAnalysis {\n    functions [GenerateSentimentAnalysisReport]\n    args {\n        ticker \"AAPL\"\n    }\n}\n",
    "volatility.baml": "// =============================================\n// Volatility Analysis Agent\n// Using Alpaca for market data\n// =============================================\n\n// Data Models\nclass VolatilityMetrics {\n    ticker string\n    period_analyzed string\n    historical_volatility float\n    implied_volatility float?\n    beta float?\n    sharpe_ratio float?\n    max_drawdown float\n    volatility_regime string // \"low\", \"moderate\", \"high\", \"extreme\"\n}\n\nclass RiskAssessment {\n    overall_risk_level string\n    volatility_trends string[]\n    risk_factors string[]\n    hedging_recommendations string[]\n}\n\nclass VolatilityAnalysisReport {\n    metrics VolatilityMetrics\n    risk_assessment RiskAssessment\n    outlook string\n    key_insights string[]\n}\n\n// Tool Functions\nfunction CalculateVolatilityMetrics(price_data: PricePoint[], ticker: string, benchmark_data: PricePoint[]) -> VolatilityMetrics {\n    client AnalysisClient\n    prompt #\"\n    Calculate comprehensive volatility metrics for {{ ticker }} using the provided price data.\n\n    Data:\n    {{ price_data }}\n\n    Benchmark data for beta calculation:\n    {{ benchmark_data }}\n\n    Calculate:\n    1. Historical volatility (annualized standard deviation of returns)\n    2. Beta vs benchmark\n    3. Sharpe ratio (assuming 2% risk-free rate)\n    4. Maximum drawdown\n    5. Current volatility regime classification\n\n    If either dataset has fewer than 30 observations, return null for the affected metrics instead of extrapolating.\n    {{ ctx.output_format }}\n    \"#\n}\n\n// Main Analysis Function\nfunction GenerateVolatilityReport(ticker: string, period: string, benchmark: string) -> VolatilityAnalysisReport {\n    client ReportClient\n    prompt #\"\n    Generate a specialized volatility analysis report for {{ ticker }} using Alpaca market data.\n\n    ANALYSIS PERIOD: {{ period }}\n    BENCHMARK: {{ benchmark }}\n\n    DATA SOURCES:\n    - Alpaca Market Data API (env.ALPACA_API_KEY, env.ALPACA_SECRET_KEY)\n      Fetch historical bars via /v2/stocks/{{ ticker }}/bars and /v2/stocks/{{ benchmark }}/bars\n\n    Report Structure:\n    1. VOLATILITY METRICS\n       - Historical volatility percentage\n       - Beta coefficient\n       - Sharpe ratio\n       - Maximum drawdown\n       - Volatility regime (low/moderate/high/extreme)\n\n    2. RISK ASSESSMENT\n       - Overall risk level\n       - Key volatility trends\n       - Risk factors\n       - Hedging recommendations\n\n    3. VOLATILITY OUTLOOK\n       - Forward-looking volatility expectations\n       - Market conditions impact\n\n    4. KEY INSIGHTS\n       - 3-5 actionable insights about volatility patterns\n\n    Use actual price data and statistical methods for calculations.\n    Focus on risk management implications.\n    If calculations cannot be performed with sufficient data quality, set the relevant fields to null and note the limitation in the narrative sections.\n\n    {{ ctx.output_format }}\n    \"#\n}\n\n// Test Configuration\ntest TestVolatilityAnalysis {\n    functions [GenerateVolatilityReport]\n    args {\n        ticker \"AAPL\"\n        period \"1y\"\n        benchmark \"SPY\"\n    }\n}\n",
}

def get_baml_files():
    return _file_map