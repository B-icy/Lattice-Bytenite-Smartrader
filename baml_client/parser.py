# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions

import baml_py

from . import stream_types, types
from .runtime import DoNotUseDirectlyCallManager, BamlCallOptions

class LlmResponseParser:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    def AnalyzeInsiderActivity(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.InsiderActivitySummary:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnalyzeInsiderActivity", llm_response=llm_response, mode="request")
        return typing.cast(types.InsiderActivitySummary, result)

    def AnalyzeNewsSentiment(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.NewsSentimentAnalysis:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnalyzeNewsSentiment", llm_response=llm_response, mode="request")
        return typing.cast(types.NewsSentimentAnalysis, result)

    def AnalyzeNewsSentimentForSentiment(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.SentimentSource:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnalyzeNewsSentimentForSentiment", llm_response=llm_response, mode="request")
        return typing.cast(types.SentimentSource, result)

    def AnalyzeOptionsSentiment(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.OptionsFlow:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnalyzeOptionsSentiment", llm_response=llm_response, mode="request")
        return typing.cast(types.OptionsFlow, result)

    def AnalyzePricePerformance(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.PriceAnalysis:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnalyzePricePerformance", llm_response=llm_response, mode="request")
        return typing.cast(types.PriceAnalysis, result)

    def AnalyzeSectorPerformance(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> typing.List["types.SectorPerformance"]:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnalyzeSectorPerformance", llm_response=llm_response, mode="request")
        return typing.cast(typing.List["types.SectorPerformance"], result)

    def AnalyzeSocialSentiment(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.SentimentSource:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnalyzeSocialSentiment", llm_response=llm_response, mode="request")
        return typing.cast(types.SentimentSource, result)

    def CalculateTechnicalIndicators(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.TechnicalIndicators:
        result = self.__options.merge_options(baml_options).parse_response(function_name="CalculateTechnicalIndicators", llm_response=llm_response, mode="request")
        return typing.cast(types.TechnicalIndicators, result)

    def CalculateVolatilityMetrics(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.VolatilityMetrics:
        result = self.__options.merge_options(baml_options).parse_response(function_name="CalculateVolatilityMetrics", llm_response=llm_response, mode="request")
        return typing.cast(types.VolatilityMetrics, result)

    def CompareToMarket(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.MarketComparison:
        result = self.__options.merge_options(baml_options).parse_response(function_name="CompareToMarket", llm_response=llm_response, mode="request")
        return typing.cast(types.MarketComparison, result)

    def ExtractResume(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.Resume:
        result = self.__options.merge_options(baml_options).parse_response(function_name="ExtractResume", llm_response=llm_response, mode="request")
        return typing.cast(types.Resume, result)

    def FetchHistoricalData(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> typing.List["types.PricePoint"]:
        result = self.__options.merge_options(baml_options).parse_response(function_name="FetchHistoricalData", llm_response=llm_response, mode="request")
        return typing.cast(typing.List["types.PricePoint"], result)

    def GenerateHistoricalAnalysisReport(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.ComprehensiveReport:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GenerateHistoricalAnalysisReport", llm_response=llm_response, mode="request")
        return typing.cast(types.ComprehensiveReport, result)

    def GenerateInsiderReport(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.InsiderAnalysisReport:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GenerateInsiderReport", llm_response=llm_response, mode="request")
        return typing.cast(types.InsiderAnalysisReport, result)

    def GenerateMarketConditionsReport(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.MarketConditionsAnalysisReport:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GenerateMarketConditionsReport", llm_response=llm_response, mode="request")
        return typing.cast(types.MarketConditionsAnalysisReport, result)

    def GenerateNewsReport(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.NewsAnalysisReport:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GenerateNewsReport", llm_response=llm_response, mode="request")
        return typing.cast(types.NewsAnalysisReport, result)

    def GenerateSentimentAnalysisReport(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.SentimentAnalysisReport:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GenerateSentimentAnalysisReport", llm_response=llm_response, mode="request")
        return typing.cast(types.SentimentAnalysisReport, result)

    def GenerateVolatilityReport(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.VolatilityAnalysisReport:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GenerateVolatilityReport", llm_response=llm_response, mode="request")
        return typing.cast(types.VolatilityAnalysisReport, result)

    def GetStockInfo(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.StockData:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GetStockInfo", llm_response=llm_response, mode="request")
        return typing.cast(types.StockData, result)

    

class LlmStreamParser:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    def AnalyzeInsiderActivity(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.InsiderActivitySummary:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnalyzeInsiderActivity", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.InsiderActivitySummary, result)

    def AnalyzeNewsSentiment(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.NewsSentimentAnalysis:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnalyzeNewsSentiment", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.NewsSentimentAnalysis, result)

    def AnalyzeNewsSentimentForSentiment(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.SentimentSource:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnalyzeNewsSentimentForSentiment", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.SentimentSource, result)

    def AnalyzeOptionsSentiment(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.OptionsFlow:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnalyzeOptionsSentiment", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.OptionsFlow, result)

    def AnalyzePricePerformance(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.PriceAnalysis:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnalyzePricePerformance", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.PriceAnalysis, result)

    def AnalyzeSectorPerformance(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> typing.List["stream_types.SectorPerformance"]:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnalyzeSectorPerformance", llm_response=llm_response, mode="stream")
        return typing.cast(typing.List["stream_types.SectorPerformance"], result)

    def AnalyzeSocialSentiment(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.SentimentSource:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnalyzeSocialSentiment", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.SentimentSource, result)

    def CalculateTechnicalIndicators(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.TechnicalIndicators:
        result = self.__options.merge_options(baml_options).parse_response(function_name="CalculateTechnicalIndicators", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.TechnicalIndicators, result)

    def CalculateVolatilityMetrics(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.VolatilityMetrics:
        result = self.__options.merge_options(baml_options).parse_response(function_name="CalculateVolatilityMetrics", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.VolatilityMetrics, result)

    def CompareToMarket(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.MarketComparison:
        result = self.__options.merge_options(baml_options).parse_response(function_name="CompareToMarket", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.MarketComparison, result)

    def ExtractResume(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.Resume:
        result = self.__options.merge_options(baml_options).parse_response(function_name="ExtractResume", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.Resume, result)

    def FetchHistoricalData(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> typing.List["stream_types.PricePoint"]:
        result = self.__options.merge_options(baml_options).parse_response(function_name="FetchHistoricalData", llm_response=llm_response, mode="stream")
        return typing.cast(typing.List["stream_types.PricePoint"], result)

    def GenerateHistoricalAnalysisReport(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.ComprehensiveReport:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GenerateHistoricalAnalysisReport", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.ComprehensiveReport, result)

    def GenerateInsiderReport(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.InsiderAnalysisReport:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GenerateInsiderReport", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.InsiderAnalysisReport, result)

    def GenerateMarketConditionsReport(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.MarketConditionsAnalysisReport:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GenerateMarketConditionsReport", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.MarketConditionsAnalysisReport, result)

    def GenerateNewsReport(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.NewsAnalysisReport:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GenerateNewsReport", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.NewsAnalysisReport, result)

    def GenerateSentimentAnalysisReport(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.SentimentAnalysisReport:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GenerateSentimentAnalysisReport", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.SentimentAnalysisReport, result)

    def GenerateVolatilityReport(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.VolatilityAnalysisReport:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GenerateVolatilityReport", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.VolatilityAnalysisReport, result)

    def GetStockInfo(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.StockData:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GetStockInfo", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.StockData, result)

    