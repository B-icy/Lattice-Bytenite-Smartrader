# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
from enum import Enum


from pydantic import BaseModel, ConfigDict


import baml_py

CheckT = typing_extensions.TypeVar('CheckT')
CheckName = typing_extensions.TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str
class Checked(BaseModel, typing.Generic[CheckT, CheckName]):
    value: CheckT
    checks: typing.Dict[CheckName, Check]

def get_checks(checks: typing.Dict[CheckName, Check]) -> typing.List[Check]:
    return list(checks.values())

def all_succeeded(checks: typing.Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))
# #########################################################################
# Generated enums (0)
# #########################################################################

# #########################################################################
# Generated classes (26)
# #########################################################################

class ComprehensiveReport(BaseModel):
    executive_summary: str
    price_analysis: "PriceAnalysis"
    fundamental_analysis: typing.Optional["FundamentalAnalysis"] = None
    technical_analysis: "TechnicalIndicators"
    market_comparison: typing.Optional["MarketComparison"] = None
    risk_assessment: str
    investment_outlook: str
    key_recommendations: typing.List[str]

class EconomicIndicator(BaseModel):
    name: str
    value: str
    date: str
    change: str
    significance: str

class FundamentalAnalysis(BaseModel):
    pe_ratio: typing.Optional[float] = None
    forward_pe_ratio: typing.Optional[float] = None
    peg_ratio: typing.Optional[float] = None
    price_to_book: typing.Optional[float] = None
    dividend_yield: typing.Optional[float] = None
    fifty_two_week_high: typing.Optional[float] = None
    fifty_two_week_low: typing.Optional[float] = None

class InsiderActivitySummary(BaseModel):
    total_buy_volume: int
    total_sell_volume: int
    net_insider_activity: float
    key_insiders: typing.List[str]
    activity_trend: str

class InsiderAnalysisReport(BaseModel):
    ticker: str
    recent_transactions: typing.List["InsiderTrade"]
    activity_summary: "InsiderActivitySummary"
    significance_assessment: str
    key_insights: typing.List[str]

class InsiderTrade(BaseModel):
    name: str
    title: str
    transaction_type: str
    shares: int
    price: float
    value: float
    transaction_date: str
    filing_date: str
    security_type: str

class MarketComparison(BaseModel):
    ticker: str
    benchmark_ticker: str
    outperformance_percent: float
    beta: typing.Optional[float] = None
    correlation: float
    relative_strength: str

class MarketConditionsAnalysisReport(BaseModel):
    market_overview: "MarketOverview"
    major_indices: typing.List["MarketIndex"]
    economic_indicators: typing.List["EconomicIndicator"]
    sector_performance: typing.List["SectorPerformance"]
    outlook: str
    key_insights: typing.List[str]

class MarketIndex(BaseModel):
    symbol: str
    name: str
    current_value: float
    change_percent: float
    volume: typing.Optional[int] = None

class MarketOverview(BaseModel):
    overall_market_sentiment: str
    vix_level: float
    market_breadth: str
    key_drivers: typing.List[str]

class MarketSentiment(BaseModel):
    overall_sentiment: str
    sentiment_score: float
    sources: typing.List["SentimentSource"]
    sentiment_trend: typing.List[str]

class NewsAnalysisReport(BaseModel):
    ticker: str
    articles: typing.List["NewsArticle"]
    sentiment_analysis: "NewsSentimentAnalysis"
    summary: str
    key_insights: typing.List[str]

class NewsArticle(BaseModel):
    title: str
    content: str
    published_date: str
    source: str
    url: str
    sentiment_score: typing.Optional[float] = None
    relevance_score: typing.Optional[float] = None

class NewsSentimentAnalysis(BaseModel):
    overall_sentiment: str
    sentiment_trend: typing.List[str]
    key_themes: typing.List[str]
    market_impact_assessment: str

class OptionsFlow(BaseModel):
    put_call_ratio: float
    unusual_activity: typing.List[str]
    institutional_sentiment: str

class PriceAnalysis(BaseModel):
    ticker: str
    period_analyzed: str
    total_return_percent: float
    volatility: float
    max_price: float
    min_price: float
    average_volume: int
    trend_direction: str
    key_insights: typing.List[str]

class PricePoint(BaseModel):
    date: str
    open: float
    high: float
    low: float
    close: float
    volume: int
    adj_close: typing.Optional[float] = None

class Resume(BaseModel):
    name: str
    email: str
    experience: typing.List[str]
    skills: typing.List[str]

class RiskAssessment(BaseModel):
    overall_risk_level: str
    volatility_trends: typing.List[str]
    risk_factors: typing.List[str]
    hedging_recommendations: typing.List[str]

class SectorPerformance(BaseModel):
    sector_name: str
    performance_percent: float
    leading_stocks: typing.List[str]
    trend: str

class SentimentAnalysisReport(BaseModel):
    ticker: str
    market_sentiment: "MarketSentiment"
    options_flow: typing.Optional["OptionsFlow"] = None
    social_sentiment: str
    analyst_sentiment: str
    key_insights: typing.List[str]

class SentimentSource(BaseModel):
    source_type: str
    sentiment_score: float
    confidence_level: float
    key_indicators: typing.List[str]

class StockData(BaseModel):
    ticker: str
    company_name: str
    current_price: float
    currency: str
    market_cap: typing.Optional[str] = None

class TechnicalIndicators(BaseModel):
    sma_20: typing.Optional[float] = None
    sma_50: typing.Optional[float] = None
    rsi: typing.Optional[float] = None
    bollinger_upper: typing.Optional[float] = None
    bollinger_lower: typing.Optional[float] = None
    support_level: typing.Optional[float] = None
    resistance_level: typing.Optional[float] = None

class VolatilityAnalysisReport(BaseModel):
    metrics: "VolatilityMetrics"
    risk_assessment: "RiskAssessment"
    outlook: str
    key_insights: typing.List[str]

class VolatilityMetrics(BaseModel):
    ticker: str
    period_analyzed: str
    historical_volatility: float
    implied_volatility: typing.Optional[float] = None
    beta: typing.Optional[float] = None
    sharpe_ratio: typing.Optional[float] = None
    max_drawdown: float
    volatility_regime: str

# #########################################################################
# Generated type aliases (0)
# #########################################################################
